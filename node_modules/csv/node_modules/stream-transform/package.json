{
  "version": "0.0.2",
  "name": "stream-transform",
  "description": "Object transformations implementing the Node.js `stream.Transform` API",
  "repository": {
    "type": "git",
    "url": "http://www.github.com/wdavidw/node-stream-transform"
  },
  "keywords": [
    "stream",
    "transform",
    "csv",
    "object"
  ],
  "dependencies": {},
  "devDependencies": {
    "coffee-script": "latest",
    "pad": "latest",
    "mocha": "latest",
    "csv-generate": "latest",
    "should": "latest"
  },
  "optionalDependencies": {},
  "main": "./lib",
  "scripts": {
    "test": "make test"
  },
  "readme": "[![Build Status](https://secure.travis-ci.org/wdavidw/node-stream-transform.png)](http://travis-ci.org/wdavidw/node-stream-transform)\n\nThis project provide a simple object transformation framework implementing the \nNode.js `stream.Transform` API. Despite being developed as a part of the Node.js \nCSV module (`npm install csv`), it could be used indepently.\n\n[Documentation for the stream-transform package is available here](https://github.com/wdavidw/node-stream-transform).\n\n*   Fully Node.js compliant, pipe through it\n*   Run sequentially or in parallel with a define number of callbacks\n*   Accept object, array or JSON as input and output\n\nUsage\n-----\n\nInstallation command is `npm install stream-transform`.\n\n### Concurrent example with a maximum of 20 parrallel functions\n\nYou may run this script with the command `node samples/sync.js`. Note how the \n`use` callback is only requesting one argument, the data to transform.\n\n```javascript\nvar transform = require('stream-transform');\ntransform()\n.parallel(20)\n.use(function(data){\n  data.push(data.shift())\n})\n.write( ['1','2','3','4'] )\n.write( ['a','b','c','d'] )\n.pipe process.stdout\n// Output:\n// 2,3,4,1\n// b,c,d,a\n```\n\n### Synchronous example\n\nYou may run this script with the command `node samples/async.js`. The call \n`parallel(1)` will restrict the number of parallel callback to 1, thus enabling \nsequential mode. Also, note how the `use` callback is requesting two arguments, \nthe data to transform and the callback to call when ready.\n    \n```javascript\nvar transform = require('stream-transform');\ntransform()\n.parallel(1)\n.use(function(row, callback){\n  setImmediate(function(){\n    row.unshift(row.pop());\n    callback(row);\n  }\n})\n.write( ['1','2','3','4'] )\n.write( ['a','b','c','d'] )\n.pipe process.stdout\n// Output:\n// 2,3,4,1\n// b,c,d,a\n```\n\nMigration\n---------\n\nMost of the generator is imported from its parent project [CSV][csv] in a effort \nto split it between the generator, the parser, the transformer and the \nstringifier.\n\nDevelopment\n-----------\n\nTests are executed with mocha. To install it, simple run `npm install` \nfollowed by `npm test`. It will install mocha and its dependencies in your \nproject \"node_modules\" directory and run the test suite. The tests run \nagainst the CoffeeScript source files.\n\nTo generate the JavaScript files, run `make build`.\n\nThe test suite is run online with [Travis][travis] against the versions \n0.9, 0.10 and 0.11 of Node.js.\n\nContributors\n------------\n\n*\t  David Worms: <https://github.com/wdavidw>\n\n[csv]: https://github.com/wdavidw/node-csv\n[travis]: https://travis-ci.org/#!/wdavidw/node-stream-transform\n\n",
  "readmeFilename": "README.md",
  "_id": "stream-transform@0.0.2",
  "dist": {
    "shasum": "030a26f44b76d738b705aa18f83157003a2dd610"
  },
  "_from": "stream-transform@*",
  "_resolved": "https://registry.npmjs.org/stream-transform/-/stream-transform-0.0.2.tgz"
}
